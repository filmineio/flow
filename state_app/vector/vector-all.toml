
[api]
enabled = true

[sources.in]
type = "stdin"

[transforms.parse]
inputs = ["in"]
type = "remap"
source = '''
  . = parse_json!(.message)
'''

[transforms.block]
type = "filter"
inputs = ["parse"]
condition = ".Block != null && .ActorId == null"

[transforms.event]
type = "filter"
inputs = ["parse"]
condition = ".EventsRoot != null"

[transforms.message]
type = "filter"
inputs = ["parse"]
condition = ".Message != null"

[transforms.bench]
type = "filter"
inputs = ["parse"]
condition = '''.target_height != null'''

[transforms.to_table]
type = "remap"
inputs = ["message"]
source = '''
  d = {}
  d.Cid = .Cid
  d.Height = .Height
  d.Block = .BlockCid
  d.MessageRctExitCode = .MessageRct.ExitCode
  d.MessageRctReturn = .MessageRct.Return
  d.MessageRctGasUsed = .MessageRct.GasUsed
  d.MessageRctEventsRoot = .MessageRct.EventsRoot
  d.SubCallOf = .SubCallOf
  d.From = .Addresses.From
  d.RobustFrom = .Addresses.RobustFrom
  d.RobustTo = .Addresses.RobustTo
  d.To = .Addresses.To
  d.Value = .Value
  d.GasLimit = .Message.GasLimit
  d.GasFeeCap = .Message.GasFeeCap
  d.GasPremium = .Message.GasPremium
  d.Method = .Message.Method
  d.Params =.Message.Params
  d.Timestamp = .BlockTimestamp
  d.Nonce = .Message.Nonce
  d.Version = .Message.Version
  d.NumberOfEvents = .NumberOfEvents
  . = d
'''

[transforms.to_blk_table]
type = "remap"
inputs = ["block"]
source = '''
  d = {}
  d.Cid = .Cid
  d.Block = encode_json(.Block)
  d.Timestamp = .Block.Timestamp
  d.Height = .Block.Height
  d.Miner = .Block.Miner
  . = d
'''

[transforms.to_events_table]
type = "remap"
inputs = ["event"]
source = '''
  d = {}
  d.MessageCid = .MessageCid
  d.Entries = encode_json(.Entries)
  d.Emitter = .Emitter
  d.Order = .Order
  d.EventsRoot = .EventsRoot
  . = d
'''

[sinks.clickhouse_blk]
type = "clickhouse"
inputs = [ "to_blk_table" ]
database = "flow"
endpoint = "http://localhost:8123"
table = "block"
compression = "gzip"
auth.strategy="basic"
auth.user="default"
auth.password="flow_p"
buffer.when_full="block"
buffer.type="disk"
buffer.max_size=500000000
batch.max_events=10


[sinks.clickhouse_events]
type = "clickhouse"
inputs = [ "to_events_table" ]
database = "flow"
endpoint = "http://localhost:8123"
table = "events"
compression = "gzip"
auth.strategy="basic"
auth.user="default"
auth.password="flow_p"
buffer.when_full="block"
buffer.type="disk"
buffer.max_size=500000000
batch.max_events=10

[sinks.clickhouse_message]
type = "clickhouse"
inputs = [ "to_table" ]
database = "flow"
endpoint = "http://localhost:8123"
table = "messages"
compression = "gzip"
auth.strategy="basic"
auth.user="default"
auth.password="flow_p"
buffer.when_full="block"
buffer.type="disk"
buffer.max_size=500000000
batch.max_events=10


[transforms.kafka_wasm_contract_filter]
type = "filter"
inputs = ["to_table"]
condition = '''(.From == "t01" && .SubCallOf != null && .Method == 1)'''

[transforms.dedupe_kafka_wasm_contract_filter]
type = "dedupe"
inputs = [ "kafka_wasm_contract_filter" ]
cache.num_events=100000
fields.match=["Cid"]

[transforms.kafka_wasm_contract]
type = "remap"
inputs = ["dedupe_kafka_wasm_contract_filter"]
source = '''
  d = .
  d.ContractType = "WASM"
  . = d
'''

[transforms.kafka_evm_contract_filter]
type = "filter"
inputs = ["to_table"]
condition = '''(.To == "t010" && .SubCallOf == null && includes([2,3], .Method))'''

[transforms.dedupe_kafka_evm_contract_filter]
type = "dedupe"
inputs = [ "kafka_evm_contract_filter" ]
cache.num_events=100000
fields.match=["Cid"]

[transforms.kafka_evm_contract]
type = "remap"
inputs = ["dedupe_kafka_evm_contract_filter"]
source = '''
  d = .
  d.ContractType = "EFVM"
  . = d
'''

[sinks.kafka_contract_out]
type = "kafka"
inputs = [ "kafka_wasm_contract", "kafka_evm_contract" ]
bootstrap_servers = "127.0.0.1:9092"
key_field="Cid"
topic = "new_contract"
compression = "none"

[sinks.kafka_contract_out.encoding]
codec = "json"

[sinks.out]
inputs = ["bench", "kafka_wasm_contract", "kafka_evm_contract", "event"]
type = "console"
encoding.codec = "json"